{"search": {"parent_tool_name": "wikipedia", "parent_tool_description": "A tool to search entity, view content and disambiguate entity on Wikipedia.\nCurrent endpoint for each function is simple and you should only use exact entity name as input for search and disambiguate. And the keyword input to lookup api should also be simple like one or two words.\nSome Tips to use the APIs bertter:\n1. When the search api doesn't find the corresponding page, you should search a related entity in the return list.\n2. You can only search one entity name in each action, so, don't concat multiple entity names in one search input.\n3. The lookup api can only be used after search api since it depends on the result page of search.\n4. When search api result in an entity page that is not related, you should disambiguate the searched entity to find other entities with the same name.\n5. Don't over rely one this simple tool, you may figure out the next action based on your own knowledge.", "parent_tool_url": "http://127.0.0.1:8079/tools/wikipedia/", "description": "The input is an exact entity name. The action will search this entity name on Wikipedia and returns the first five sentences if it exists. If not, it will return some related entities to search next.. Your input should be a json (args json schema): {{\"entity\" : string, }} The Action to trigger this API should be search and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "lookup": {"parent_tool_name": "wikipedia", "parent_tool_description": "A tool to search entity, view content and disambiguate entity on Wikipedia.\nCurrent endpoint for each function is simple and you should only use exact entity name as input for search and disambiguate. And the keyword input to lookup api should also be simple like one or two words.\nSome Tips to use the APIs bertter:\n1. When the search api doesn't find the corresponding page, you should search a related entity in the return list.\n2. You can only search one entity name in each action, so, don't concat multiple entity names in one search input.\n3. The lookup api can only be used after search api since it depends on the result page of search.\n4. When search api result in an entity page that is not related, you should disambiguate the searched entity to find other entities with the same name.\n5. Don't over rely one this simple tool, you may figure out the next action based on your own knowledge.", "parent_tool_url": "http://127.0.0.1:8079/tools/wikipedia/", "description": "The input is a keyword. This action will look up in the current passage and return the next several sentences containing the keyword in current passage.. Your input should be a json (args json schema): {{\"keyword\" : string, }} The Action to trigger this API should be lookup and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "disambiguation": {"parent_tool_name": "wikipedia", "parent_tool_description": "A tool to search entity, view content and disambiguate entity on Wikipedia.\nCurrent endpoint for each function is simple and you should only use exact entity name as input for search and disambiguate. And the keyword input to lookup api should also be simple like one or two words.\nSome Tips to use the APIs bertter:\n1. When the search api doesn't find the corresponding page, you should search a related entity in the return list.\n2. You can only search one entity name in each action, so, don't concat multiple entity names in one search input.\n3. The lookup api can only be used after search api since it depends on the result page of search.\n4. When search api result in an entity page that is not related, you should disambiguate the searched entity to find other entities with the same name.\n5. Don't over rely one this simple tool, you may figure out the next action based on your own knowledge.", "parent_tool_url": "http://127.0.0.1:8079/tools/wikipedia/", "description": "The input is an entity name. This action will disambiguate this entity name to find other entities with similar names in Wikipedia.. Your input should be a json (args json schema): {{\"entity\" : string, }} The Action to trigger this API should be disambiguation and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "coming_out_filter": {"parent_tool_name": "douban", "parent_tool_description": "Plugin for search for up-to-date film information.", "parent_tool_url": "http://127.0.0.1:8079/tools/douban-film/", "description": "coming_out_filter(args: str) prints the details of the filtered [outNum] coming films now according to region, cate and outNum. \nargs is a list like 'str1, str2, str3, str4'\nstr1 represents Production country or region. If you cannot find a region, str1 is \u5168\u90e8\nstr2 represents movie's category. If you cannot find a category, str2 is \u5168\u90e8\nstr3 can be a integer number that agent want to get. If you cannot find a number, str2 is 100. If the found movie's num is less than str2, Final Answer only print [the found movie's num] movies.\nstr4 can be a True or False that refluct whether agent want the result sorted by people number which look forward to the movie.\nFinal answer should be complete.\n\nThis is an example:\nThought: I need to find the upcoming Chinese drama movies and the top 2 most wanted movies\nAction: coming_out_filter\nAction Input: {{\"args\" : \"\u4e2d\u56fd, \u5267\u60c5, 2, True\"}}\nObservation: {{\"date\":{{\"23\":\"04\u670828\u65e5\",\"50\":\"07\u6708\"}},\"title\":{{\"23\":\"\u957f\u7a7a\u4e4b\u738b\",\"50\":\"\u70ed\u70c8\"}},\"cate\":{{\"23\":\"\u5267\u60c5 / \u52a8\u4f5c\",\"50\":\"\u5267\u60c5 / \u559c\u5267\"}},\"region\":{{\"23\":\"\u4e2d\u56fd\u5927\u9646\",\"50\":\"\u4e2d\u56fd\u5927\u9646\"}},\"wantWatchPeopleNum\":{{\"23\":\"39303\u4eba\",\"50\":\"26831\u4eba\"}}}}\nThought: I now know the top 2 upcoming Chinese drama movies\nFinal Answer: \u5373\u5c06\u4e0a\u6620\u7684\u4e2d\u56fd\u5267\u60c5\u7535\u5f71\u67092\u90e8\uff1a\u957f\u7a7a\u4e4b\u738b\u3001\u70ed\u70c8\uff0c\u5927\u5bb6\u6700\u60f3\u770b\u7684\u524d2\u90e8\u5206\u522b\u662f\uff1a\u957f\u7a7a\u4e4b\u738b\u3001\u70ed\u70c8\u3002. Your input should be a json (args json schema): {{\"args\" : string, }} The Action to trigger this API should be coming_out_filter and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "now_playing_out_filter": {"parent_tool_name": "douban", "parent_tool_description": "Plugin for search for up-to-date film information.", "parent_tool_url": "http://127.0.0.1:8079/tools/douban-film/", "description": "NowPlayingOutFilter(args: str) prints the details of the filtered [outNum] playing films now according to region, scoreSort\nargs is a list like 'str1, str2, str3'\nstr1 can be '\u4e2d\u56fd','\u65e5\u672c' or other Production country or region. If you cannot find a region, str1 is \u5168\u90e8\nstr2 can be a integer number that agent want to get. If you cannot find a number, str2 is 100. If the found movie's num is less than str2, Final Answer only print [the found movie's num] movies.\nstr3 can be a True or False that refluct whether agent want the result sorted by score.\nFinal answer should be complete.\n\nThis is an example:\nInput: \u60a8\u77e5\u9053\u73b0\u5728\u6709\u6b63\u5728\u4e0a\u6620\u4e2d\u56fd\u7684\u7535\u5f71\u5417\uff1f\u8bf7\u8f93\u51fa3\u90e8\nThought: I need to find the currently playing movies with the highest scores\nAction: now_playing_out_filter\nAction Input: {{\"args\" : \"\u5168\u90e8, 3, True\"}}\nObservation: {{\"title\":{{\"34\":\"\u5207\u8179\",\"53\":\"\u5409\u8d5b\u5c14\",\"31\":\"\u5c0f\u68ee\u6797 \u590f\u79cb\u7bc7\"}},\"score\":{{\"34\":\"9.4\",\"53\":\"9.2\",\"31\":\"9.0\"}},\"region\":{{\"34\":\"\u65e5\u672c\",\"53\":\"\u897f\u5fb7\",\"31\":\"\u65e5\u672c\"}},\"director\":{{\"34\":\"\u5c0f\u6797\u6b63\u6811\",\"53\":\"Hugo Niebeling\",\"31\":\"\u68ee\u6df3\u4e00\"}},\"actors\":{{\"34\":\"\u4ef2\u4ee3\u8fbe\u77e2 / \u77f3\u6d5c\u6717 / \u5ca9\u4e0b\u5fd7\u9ebb\",\"53\":\"\u5361\u62c9\u00b7\u5f17\u62c9\u5947 / \u57c3\u91cc\u514b\u00b7\u5e03\u9c81\u6069 / Bruce Marks\",\"31\":\"\u6865\u672c\u7231 / \u4e09\u6d66\u8d35\u5927 / \u677e\u5188\u8309\u4f18\"}}}}\nThought: I now know the currently playing movies with the highest scores\nFinal Answer: \u73b0\u5728\u4e0a\u6620\u7684\u8bc4\u5206\u6700\u9ad8\u76843\u90e8\u7535\u5f71\u662f\uff1a\u5207\u8179\u3001\u5409\u8d5b\u5c14\u3001\u5c0f\u68ee\u6797 \u590f\u79cb\u7bc7. Your input should be a json (args json schema): {{\"args\" : string, }} The Action to trigger this API should be now_playing_out_filter and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "print_detail": {"parent_tool_name": "douban", "parent_tool_description": "Plugin for search for up-to-date film information.", "parent_tool_url": "http://127.0.0.1:8079/tools/douban-film/", "description": "parsing_detail_page(args) prints the details of a movie, giving its name.\n            args is a list like 'str1'\n            str1 is target movie's name.\n            step1: apply function parse_coming_page and parse_nowplaying_page and get all movie's links and other infomation.\n            step2: get the target movie's link from df_coming or df_nowplaying\n            step3: get detail from step2's link\n\n            This is an example: \n            Input: \"\u7535\u5f71\u6d41\u6d6a\u5730\u74032\u600e\u4e48\u6837\uff1f\"\n            Thought: I need to find the movie's information\n            Action: print_detail\n            Action Input: {{\"args\" : \"\u6d41\u6d6a\u5730\u74032\"}}\n            Observation: \"\u662f\u4e00\u90e8\u4e2d\u56fd\u5927\u9646\u7684\u79d1\u5e7b\u3001\u5192\u9669\u3001\u707e\u96be\u7535\u5f71\uff0c\u7531\u90ed\u5e06\u5bfc\u6f14\uff0c\u5434\u4eac\u3001\u5218\u5fb7\u534e\u3001\u674e\u96ea\u5065\u7b49\u4eba\u4e3b\u6f14.\n\u5267\u60c5\u7b80\u4ecb\uff1a\u592a\u9633\u5373\u5c06\u6bc1\u706d\uff0c\u4eba\u7c7b\u5728\u5730\u7403\u8868\u9762\u5efa\u9020\u51fa\u5de8\u5927\u7684\u63a8\u8fdb\u5668\uff0c\u5bfb\u627e\u65b0\u7684\u5bb6\u56ed\u3002\u7136\u800c\u5b87\u5b99\u4e4b\u8def\u5371\u673a\u56db\u4f0f\uff0c\u4e3a\u4e86\u62ef\u6551\u5730\u7403\uff0c\u6d41\u6d6a\u5730\u7403\u65f6\u4ee3\u7684\u5e74\u8f7b\u4eba\u518d\u6b21\u633a\u8eab\u800c\u51fa\uff0c\u5c55\u5f00\u4e89\u5206\u593a\u79d2\u7684\u751f\u6b7b\u4e4b\u6218\u3002\"\n            Thought: I now know the final answer\n            Final Answer: \u6d41\u6d6a\u5730\u74032\u662f\u4e00\u90e8\u4e2d\u56fd\u5927\u9646\u7684\u79d1\u5e7b\u3001\u5192\u9669\u3001\u707e\u96be\u7535\u5f71\uff0c\u7531\u90ed\u5e06\u5bfc\u6f14\uff0c\u5434\u4eac\u3001\u5218\u5fb7\u534e\u3001\u674e\u96ea\u5065\u7b49\u4eba\u4e3b\u6f14\uff0c\u5267\u60c5\u7b80\u4ecb\u662f\u592a\u9633\u5373\u5c06\u6bc1\u706d\uff0c\u4eba\u7c7b\u5728\u5730\u7403\u8868\u9762\u5efa\u9020\u51fa\u5de8\u5927\u7684\u63a8\u8fdb\u5668\uff0c\u5bfb\u627e\u65b0\u7684\u5bb6\u56ed\uff0c\u7136\u800c\u5b87\u5b99\u4e4b\u8def\u5371\u673a\u56db\u4f0f\uff0c\u4e3a\u4e86\u62ef\u6551\u5730\u7403\uff0c\u6d41\u6d6a\u5730\u7403\u65f6\u4ee3\u7684\u5e74\u8f7b\u4eba\u518d\u6b21\u633a\u8eab\u800c\u51fa\uff0c. Your input should be a json (args json schema): {{\"args\" : string, }} The Action to trigger this API should be print_detail and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "run_python": {"parent_tool_name": "python", "parent_tool_description": "A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.", "parent_tool_url": "http://127.0.0.1:8079/tools/python/", "description": "Run python code in a REPL.. Your input should be a json (args json schema): {{\"query\" : string, }} The Action to trigger this API should be run_python and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "search_places": {"parent_tool_name": "google_places", "parent_tool_description": "A tool that query the Google Places API. Useful for when you need to validate or discover addressed from ambiguous text. Input should be a search query.", "parent_tool_url": "http://127.0.0.1:8079/tools/google_places/", "description": "Run Places search.. Your input should be a json (args json schema): {{\"query\" : string, }} The Action to trigger this API should be search_places and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "getWolframAlphaResults": {"parent_tool_name": "wolframalpha", "parent_tool_description": "\"Dynamic computation and curated data from WolframAlpha and Wolfram Cloud.\nOnly use the getWolframAlphaResults endpoints; all other Wolfram endpoints are deprecated.\nPrefer getWolframAlphaResults unless Wolfram Language code should be evaluated.\nTry to include images returned by getWolframAlphaResults. Queries to getWolframAlphaResults must ALWAYS have this structure: {{\"input\": query}}.\n\",", "parent_tool_url": "http://127.0.0.1:8079/tools/wolframalpha/", "description": "Get Wolfram|Alpha results using natural query. Queries to getWolframAlphaResults must ALWAYS have this structure: {{\"input\": query}}. And please directly read the output json.. Your input should be a json (args json schema): {{\"input\" : string, }} The Action to trigger this API should be getWolframAlphaResults and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_bark": {"parent_tool_name": "gradio_tools", "parent_tool_description": "Python library for converting Gradio apps into tools that can be leveraged by a large language model (LLM)-based agent to complete its task.", "parent_tool_url": "http://127.0.0.1:8079/tools/gradio_tools/", "description": "Converting text into sounds that sound like a human read it.. Your input should be a json (args json schema): {{\"input\" : string, }} The Action to trigger this API should be get_bark and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_qa": {"parent_tool_name": "gradio_tools", "parent_tool_description": "Python library for converting Gradio apps into tools that can be leveraged by a large language model (LLM)-based agent to complete its task.", "parent_tool_url": "http://127.0.0.1:8079/tools/gradio_tools/", "description": "Answering questions from the image of the document.. Your input should be a json (args json schema): {{\"input\" : string, }} The Action to trigger this API should be get_qa and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_imagecaption": {"parent_tool_name": "gradio_tools", "parent_tool_description": "Python library for converting Gradio apps into tools that can be leveraged by a large language model (LLM)-based agent to complete its task.", "parent_tool_url": "http://127.0.0.1:8079/tools/gradio_tools/", "description": "Creating a caption for an image.. Your input should be a json (args json schema): {{\"input\" : string, }} The Action to trigger this API should be get_imagecaption and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_promptgenerator": {"parent_tool_name": "gradio_tools", "parent_tool_description": "Python library for converting Gradio apps into tools that can be leveraged by a large language model (LLM)-based agent to complete its task.", "parent_tool_url": "http://127.0.0.1:8079/tools/gradio_tools/", "description": "Generating a prompt for stable diffusion and other image and video generators based on text input.. Your input should be a json (args json schema): {{\"input\" : string, }} The Action to trigger this API should be get_promptgenerator and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_stablediffusion": {"parent_tool_name": "gradio_tools", "parent_tool_description": "Python library for converting Gradio apps into tools that can be leveraged by a large language model (LLM)-based agent to complete its task.", "parent_tool_url": "http://127.0.0.1:8079/tools/gradio_tools/", "description": "generate images based on text input.. Your input should be a json (args json schema): {{\"input\" : string, }} The Action to trigger this API should be get_stablediffusion and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_texttovideo": {"parent_tool_name": "gradio_tools", "parent_tool_description": "Python library for converting Gradio apps into tools that can be leveraged by a large language model (LLM)-based agent to complete its task.", "parent_tool_url": "http://127.0.0.1:8079/tools/gradio_tools/", "description": "Creating videos from text.. Your input should be a json (args json schema): {{\"input\" : string, }} The Action to trigger this API should be get_texttovideo and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_imgtomsc": {"parent_tool_name": "gradio_tools", "parent_tool_description": "Python library for converting Gradio apps into tools that can be leveraged by a large language model (LLM)-based agent to complete its task.", "parent_tool_url": "http://127.0.0.1:8079/tools/gradio_tools/", "description": "Creating music from images.. Your input should be a json (args json schema): {{\"input\" : string, }} The Action to trigger this API should be get_imgtomsc and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_audiotrans": {"parent_tool_name": "gradio_tools", "parent_tool_description": "Python library for converting Gradio apps into tools that can be leveraged by a large language model (LLM)-based agent to complete its task.", "parent_tool_url": "http://127.0.0.1:8079/tools/gradio_tools/", "description": "Transcribing an audio file track into text transcript.. Your input should be a json (args json schema): {{\"input\" : string, }} The Action to trigger this API should be get_audiotrans and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_imgprompt": {"parent_tool_name": "gradio_tools", "parent_tool_description": "Python library for converting Gradio apps into tools that can be leveraged by a large language model (LLM)-based agent to complete its task.", "parent_tool_url": "http://127.0.0.1:8079/tools/gradio_tools/", "description": "Creating a prompt for StableDiffusion that matches the input image.. Your input should be a json (args json schema): {{\"input\" : string, }} The Action to trigger this API should be get_imgprompt and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "ItemQuery": {"parent_tool_name": "walmart", "parent_tool_description": "This is a plugin for look up real walmart infomation. Results from this API are inaccessible for users. Please organize and re-present them.", "parent_tool_url": "http://127.0.0.1:8079/tools/walmart/", "description": "This API gather retail information about queried items at walmart\n:param item: product name presented as string.\n:param option_num: the number of items presented for each queried item.\n:return: a dict walmart retail information about queried items.. Your input should be a json (args json schema): {{\"item\" : string, \"option_num\" : integer, }} The Action to trigger this API should be ItemQuery and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "search_literature": {"parent_tool_name": "meta_analysis", "parent_tool_description": "Plugin for searching and analyzing literatures. All input should be a json like {{'input': 'some input'}}. Please use the provided questions and search step by step.", "parent_tool_url": "http://127.0.0.1:8079/tools/meta_analysis/", "description": "search for the given topic literatures in the database and return the path of literatures file and the number of literatures. the searching term should be key words in the topic (2-5 words). the number of literatures will be less than maxnum (recommend 30). Your input should be a json (args json schema): {{\"topic\" : string, \"maxnum\" : integer, \"term\" : string, }} The Action to trigger this API should be search_literature and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "split_criteria": {"parent_tool_name": "meta_analysis", "parent_tool_description": "Plugin for searching and analyzing literatures. All input should be a json like {{'input': 'some input'}}. Please use the provided questions and search step by step.", "parent_tool_url": "http://127.0.0.1:8079/tools/meta_analysis/", "description": "split the screening requirements in the criteria of the literatures into a series of simple yes/no problems, and return the path of the splitted questions.. Your input should be a json (args json schema): {{\"criteria\" : string, }} The Action to trigger this API should be split_criteria and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "literature_filter": {"parent_tool_name": "meta_analysis", "parent_tool_description": "Plugin for searching and analyzing literatures. All input should be a json like {{'input': 'some input'}}. Please use the provided questions and search step by step.", "parent_tool_url": "http://127.0.0.1:8079/tools/meta_analysis/", "description": "Check each literatures saved in the literature path according to the questions saved in the question path, and return the literatures that match the requirements. Concat path is the concatenated string of literature path and question path connected with '&&&'.. Your input should be a json (args json schema): {{\"concat_path\" : string, }} The Action to trigger this API should be literature_filter and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "draw_table": {"parent_tool_name": "meta_analysis", "parent_tool_description": "Plugin for searching and analyzing literatures. All input should be a json like {{'input': 'some input'}}. Please use the provided questions and search step by step.", "parent_tool_url": "http://127.0.0.1:8079/tools/meta_analysis/", "description": "extract the important elements of the literatures recorded in the literature path and return the path of table records. concatenate the literature path and the analysis topic with '&&&' as the input.. Your input should be a json (args json schema): {{\"literature_path_and_topic\" : string, }} The Action to trigger this API should be draw_table and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "combine_table": {"parent_tool_name": "meta_analysis", "parent_tool_description": "Plugin for searching and analyzing literatures. All input should be a json like {{'input': 'some input'}}. Please use the provided questions and search step by step.", "parent_tool_url": "http://127.0.0.1:8079/tools/meta_analysis/", "description": "combine several tables recorded in the table path into one comprehensive record table and return. give the literature path, table path and the exploring topic as the input.. Your input should be a json (args json schema): {{\"literature_path\" : string, \"table_path\" : string, \"topic\" : string, }} The Action to trigger this API should be combine_table and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "generate_summary": {"parent_tool_name": "meta_analysis", "parent_tool_description": "Plugin for searching and analyzing literatures. All input should be a json like {{'input': 'some input'}}. Please use the provided questions and search step by step.", "parent_tool_url": "http://127.0.0.1:8079/tools/meta_analysis/", "description": "given the exploring topic and the record table path of the literatures, this tool generates a paragraph of summary.. Your input should be a json (args json schema): {{\"topic\" : string, \"table_path\" : string, }} The Action to trigger this API should be generate_summary and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "print_literature": {"parent_tool_name": "meta_analysis", "parent_tool_description": "Plugin for searching and analyzing literatures. All input should be a json like {{'input': 'some input'}}. Please use the provided questions and search step by step.", "parent_tool_url": "http://127.0.0.1:8079/tools/meta_analysis/", "description": "given the literature path and number that are required to display, this tool returns the title and abstract of the literature.. Your input should be a json (args json schema): {{\"literature_path\" : string, \"print_num\" : integer, }} The Action to trigger this API should be print_literature and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "print_tablefile": {"parent_tool_name": "meta_analysis", "parent_tool_description": "Plugin for searching and analyzing literatures. All input should be a json like {{'input': 'some input'}}. Please use the provided questions and search step by step.", "parent_tool_url": "http://127.0.0.1:8079/tools/meta_analysis/", "description": "given the table file path that are required to display, this tool reads the file and returns the string of the table.. Your input should be a json (args json schema): {{\"table_path\" : string, }} The Action to trigger this API should be print_tablefile and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_weather_today": {"parent_tool_name": "weather", "parent_tool_description": "Plugin for look up weather information", "parent_tool_url": "http://127.0.0.1:8079/tools/weather/", "description": "Get today's the weather. Your input should be a json (args json schema): {{\"location\" : string, }} The Action to trigger this API should be get_weather_today and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "forecast_weather": {"parent_tool_name": "weather", "parent_tool_description": "Plugin for look up weather information", "parent_tool_url": "http://127.0.0.1:8079/tools/weather/", "description": "Forecast weather in the upcoming days.. Your input should be a json (args json schema): {{\"location\" : string, \"days\" : integer, }} The Action to trigger this API should be forecast_weather and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_arxiv_article_information": {"parent_tool_name": "arxiv", "parent_tool_description": "Search information from Arxiv.org Useful for when you need to answer questions about Physics, Mathematics, Computer Science, Quantitative Biology, Quantitative Finance, Statistics, Electrical Engineering, and Economics from scientific articles on arxiv.org. Input should be a search query.", "parent_tool_url": "http://127.0.0.1:8079/tools/arxiv/", "description": "Run Arxiv search and get the article meta information.. Your input should be a json (args json schema): {{\"query\" : string, }} The Action to trigger this API should be get_arxiv_article_information and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "write_file": {"parent_tool_name": "file_operation", "parent_tool_description": "Plugin for operating files", "parent_tool_url": "http://127.0.0.1:8079/tools/file_operation/", "description": "write file to disk. Your input should be a json (args json schema): {{\"file_path\" : string, \"text\" : string, }} The Action to trigger this API should be write_file and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "read_file": {"parent_tool_name": "file_operation", "parent_tool_description": "Plugin for operating files", "parent_tool_url": "http://127.0.0.1:8079/tools/file_operation/", "description": "read file from disk. Your input should be a json (args json schema): {{\"file_path\" : string, }} The Action to trigger this API should be read_file and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "search_properties": {"parent_tool_name": "Zillow", "parent_tool_description": "Plugin for look up real estate information", "parent_tool_url": "http://127.0.0.1:8079/tools/zillow/", "description": "Function to search properties based on a set of parameters.\n\nParameters:\nlocation (str): Location details, address, county, neighborhood or Zip code.\npage (int): Page number if at the previous response totalPages > 1.\nstatus_type (str): Status type of the property.\nhome_type (str): Type of the home.\nsort (str): Sorting option for the results.\npolygon (str): Polygon coordinates for the search.\nminPrice (float): Minimum price of the property.\nmaxPrice (float): Maximum price of the property.\nrentMinPrice (float): Minimum rent price of the property.\nrentMaxPrice (float): Maximum rent price of the property.\nbathsMin (int): Minimum number of bathrooms.\nbathsMax (int): Maximum number of bathrooms.\nbedsMin (int): Minimum number of bedrooms.\nbedsMax (int): Maximum number of bedrooms.\nsqftMin (int): Minimum square feet area of the property.\nsqftMax (int): Maximum square feet area of the property.\n buildYearMin (int): Minimum year of construction of the property.\nbuildYearMax (int): Maximum year of construction of the property.\ndaysOn (str): Days on Zillow.\nsoldInLast (str): Property sold in the last days.\nisBasementFinished (int): Whether the basement is finished or not.\nisBasementUnfinished (int): Whether the basement is unfinished or not.\nisPendingUnderContract (int): Whether the property is under contract or not.\nisAcceptingBackupOffers (int): Whether the property is accepting backup offers or not.\nisComingSoon (bool): Whether the property is coming soon or not.\notherListings (int): Whether to include other listings or not.\nisNewConstruction (bool): Whether the property is new construction or not.\nkeywords (str): Keywords to filter the search.\nlotSizeMin (str): Minimum lot size of the property.\nlotSizeMax (str): Maximum lot size of the property.\nsaleByAgent (str): Whether the property is for sale by agent or not.\nsaleByOwner (str): Whether the property is for sale by owner or not.\nisForSaleForeclosure (bool): Whether the property is for sale by foreclosure or not.\nisWaterfront (bool): Whether the property is a waterfront property or not.\nhasPool (bool): Whether the property has a pool or not.\nhasAirConditioning (bool): Whether the property has air conditioning or not.\nisCityView (bool): Whether the property has a city view or not.\nisMountainView (bool): Whether the property has a mountain view or not.\nisWaterView (bool): Whether the property has a water view or not.\nisParkView (bool): Whether the property has a park view or not.\nisOpenHousesOnly (bool): Whether to only include properties with open houses.\nis3dHome (bool): Whether the property has a 3D home tour.\ncoordinates (str): Coordinates of the location for the search.\nhoa (float): Maximum HOA.\nincludeHomesWithNoHoaData (bool): Whether to include homes with no HOA data.\nisAuction (bool): Whether the property is for auction.\n\nReturns:\nA response object from the Zillow API.. Your input should be a json (args json schema): {{\"location\" : string, \"page\" : integer, \"status_type\" : string, \"home_type\" : string, \"sort\" : string, \"polygon\" : string, \"minPrice\" : number, \"maxPrice\" : number, \"rentMinPrice\" : number, \"rentMaxPrice\" : number, \"bathsMin\" : integer, \"bathsMax\" : integer, \"bedsMin\" : integer, \"bedsMax\" : integer, \"sqftMin\" : integer, \"sqftMax\" : integer, \"buildYearMin\" : integer, \"buildYearMax\" : integer, \"daysOn\" : string, \"soldInLast\" : string, \"isBasementFinished\" : integer, \"isBasementUnfinished\" : integer, \"isPendingUnderContract\" : integer, \"isAcceptingBackupOffers\" : integer, \"isComingSoon\" : boolean, \"otherListings\" : integer, \"isNewConstruction\" : boolean, \"keywords\" : string, \"lotSizeMin\" : string, \"lotSizeMax\" : string, \"saleByAgent\" : string, \"saleByOwner\" : string, \"isForSaleForeclosure\" : boolean, \"isWaterfront\" : boolean, \"hasPool\" : boolean, \"hasAirConditioning\" : boolean, \"isCityView\" : boolean, \"isMountainView\" : boolean, \"isWaterView\" : boolean, \"isParkView\" : boolean, \"isOpenHousesOnly\" : boolean, \"is3dHome\" : boolean, \"coordinates\" : string, \"hoa\" : number, \"includeHomesWithNoHoaData\" : boolean, \"isAuction\" : boolean, }} The Action to trigger this API should be search_properties and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "rent_estimate": {"parent_tool_name": "Zillow", "parent_tool_description": "Plugin for look up real estate information", "parent_tool_url": "http://127.0.0.1:8079/tools/zillow/", "description": "Estimate rent for a property.\n\nArgs:\npropertyType (str): Type of the property. This is a required parameter. Options are 'SingleFamily', 'Condo', 'MultiFamily', 'Townhouse', 'Apartment'\naddress (str, optional): Address of the property.\nlong (float, optional): Longitude of the property.\nlat (float, optional): Latitude of the property.\nd (float, optional): Diameter in miles. The max and low values are 0.5 and 0.05 respectively. The default value is 0.5.\nbeds (int, optional): Number of bedrooms in the property.\nbaths (int, optional): Number of bathrooms in the property.\nsqftMin (int, optional): Minimum square footage of the property.\nsqftMax (int, optional): Maximum square footage of the property.\n\nReturns:\nA response object from the Zillow API with rent estimate and comparable rentals information.. Your input should be a json (args json schema): {{\"propertyType\" : string, \"address\" : string, \"long\" : number, \"lat\" : number, \"d\" : number, \"beds\" : integer, \"baths\" : integer, \"sqftMin\" : integer, \"sqftMax\" : integer, }} The Action to trigger this API should be rent_estimate and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "zillow_property": {"parent_tool_name": "Zillow", "parent_tool_description": "Plugin for look up real estate information", "parent_tool_url": "http://127.0.0.1:8079/tools/zillow/", "description": "Fetch property details and Zestimate value.\n\nArgs:\nzpid (int, optional): Unique ID that Zillow gives to each property.\nproperty_url (str, optional): Full page URL of the property on Zillow.\n\nReturns:\nA response object from the Zillow API with property details and Zestimate value.. Your input should be a json (args json schema): {{\"zpid\" : integer, \"property_url\" : string, }} The Action to trigger this API should be zillow_property and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "property_by_coordinates": {"parent_tool_name": "Zillow", "parent_tool_description": "Plugin for look up real estate information", "parent_tool_url": "http://127.0.0.1:8079/tools/zillow/", "description": "Search property by coordinates.\n\nArgs:\nlong (float): Longitude of the property. This is a required parameter.\nlat (float): Latitude of the property. This is a required parameter.\nd (float, optional): Diameter in miles. The max and low values are 0.5 and 0.05 respectively. The default value is 0.1.\nincludeSold (bool, optional): Include sold properties in the results. True or 1 to include (default), False or 0 to exclude.\n\nReturns:\nA response object from the Zillow API with an array of zpid.. Your input should be a json (args json schema): {{\"long\" : number, \"lat\" : number, \"d\" : number, \"includeSold\" : boolean, }} The Action to trigger this API should be property_by_coordinates and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "property_by_mls": {"parent_tool_name": "Zillow", "parent_tool_description": "Plugin for look up real estate information", "parent_tool_url": "http://127.0.0.1:8079/tools/zillow/", "description": "Search property by MLS #.\n\nArgs:\nmls (str): MLS # of the property. This is a required parameter.\n\nReturns:\nA response object from the Zillow API with an array of zpid.. Your input should be a json (args json schema): {{\"mls\" : string, }} The Action to trigger this API should be property_by_mls and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "location_suggestions": {"parent_tool_name": "Zillow", "parent_tool_description": "Plugin for look up real estate information", "parent_tool_url": "http://127.0.0.1:8079/tools/zillow/", "description": "Search location by name.\n\nArgs:\nq (str): Name of the state, county, neighborhood, city, or street. This is a required parameter.\n\nReturns:\nA response object from the Zillow API with suggested locations.. Your input should be a json (args json schema): {{\"q\" : string, }} The Action to trigger this API should be location_suggestions and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "similar_property": {"parent_tool_name": "Zillow", "parent_tool_description": "Plugin for look up real estate information", "parent_tool_url": "http://127.0.0.1:8079/tools/zillow/", "description": "Get similar properties for sale. Either zpid or property_url is a required parameter.\n\nArgs:\nzpid (int, optional): Zillow's unique identifier for a property. This can be obtained from /propertyExtendedSearch\n    or /propertyByCoordinates endpoints, or extracted from a full URL.\nproperty_url (str, optional): Full page URL of the property.\n\nReturns:\nA response object from the Zillow API with similar properties for sale.. Your input should be a json (args json schema): {{\"zpid\" : integer, \"property_url\" : string, }} The Action to trigger this API should be similar_property and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "similar_for_rent": {"parent_tool_name": "Zillow", "parent_tool_description": "Plugin for look up real estate information", "parent_tool_url": "http://127.0.0.1:8079/tools/zillow/", "description": "Get similar properties for rent. Either zpid or property_url is a required parameter.\n\nArgs:\nzpid (int, optional): Zillow's unique identifier for a property. This can be obtained from /propertyExtendedSearch\n    or /propertyByCoordinates endpoints, or extracted from a full URL.\nproperty_url (str, optional): Full page URL of the property.\n\nReturns:\nA response object from the Zillow API with similar properties for rent.. Your input should be a json (args json schema): {{\"zpid\" : integer, \"property_url\" : string, }} The Action to trigger this API should be similar_for_rent and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_today_date": {"parent_tool_name": "Stock", "parent_tool_description": "Plugin for look up stock information", "parent_tool_url": "http://127.0.0.1:8079/tools/stock/", "description": "Get today's date.  The Action to trigger this API should be get_today_date and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "add_date": {"parent_tool_name": "Stock", "parent_tool_description": "Plugin for look up stock information", "parent_tool_url": "http://127.0.0.1:8079/tools/stock/", "description": "Add days to a date. Date should be pass as 'yyyy-mm-dd'.. Your input should be a json (args json schema): {{\"date\" : string, \"days\" : integer, }} The Action to trigger this API should be add_date and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_daily_prices": {"parent_tool_name": "Stock", "parent_tool_description": "Plugin for look up stock information", "parent_tool_url": "http://127.0.0.1:8079/tools/stock/", "description": "Get the stock price of an entity in the stock market. Date should be pass as 'yyyy-mm-dd'.. Your input should be a json (args json schema): {{\"symbol\" : string, \"date\" : string, }} The Action to trigger this API should be get_daily_prices and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_open_info": {"parent_tool_name": "Stock", "parent_tool_description": "Plugin for look up stock information", "parent_tool_url": "http://127.0.0.1:8079/tools/stock/", "description": "get information about if the market in the region is open. Your input should be a json (args json schema): {{\"region\" : string, }} The Action to trigger this API should be get_open_info and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "get_exchange_rate": {"parent_tool_name": "Stock", "parent_tool_description": "Plugin for look up stock information", "parent_tool_url": "http://127.0.0.1:8079/tools/stock/", "description": "This API returns the realtime exchange rate for a pair of digital currency (e.g., Bitcoin) and physical currency (e.g., USD).. Your input should be a json (args json schema): {{\"from_currency\" : string, \"to_currency\" : string, }} The Action to trigger this API should be get_exchange_rate and the input parameters should be a json dict string. Pay attention to the type of parameters."}, "search_general": {"parent_tool_name": "google_serper", "parent_tool_description": "A low-cost Google Search API.Useful for when you need to answer questions about current events.Input should be a search query. Output is a JSON object of the query results", "parent_tool_url": "http://127.0.0.1:8079/tools/google_serper/", "description": "Run query through GoogleSearch and parse result.. Your input should be a json (args json schema): {{\"query\" : string, }} The Action to trigger this API should be search_general and the input parameters should be a json dict string. Pay attention to the type of parameters."}}